// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewPhrase extends ethereum.Event {
  get params(): NewPhrase__Params {
    return new NewPhrase__Params(this);
  }
}

export class NewPhrase__Params {
  _event: NewPhrase;

  constructor(event: NewPhrase) {
    this._event = event;
  }

  get phrase(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get royalty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewTrack extends ethereum.Event {
  get params(): NewTrack__Params {
    return new NewTrack__Params(this);
  }
}

export class NewTrack__Params {
  _event: NewTrack;

  constructor(event: NewTrack) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get phrases(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get cost(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DDaw__phrasesResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getRoyalty(): BigInt {
    return this.value1;
  }
}

export class DDaw__tracksResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getCost(): BigInt {
    return this.value1;
  }

  getUri(): string {
    return this.value2;
  }

  getNft(): Address {
    return this.value3;
  }
}

export class DDaw extends ethereum.SmartContract {
  static bind(address: Address): DDaw {
    return new DDaw("DDaw", address);
  }

  phrases(param0: string): DDaw__phrasesResult {
    let result = super.call("phrases", "phrases(string):(address,uint256)", [
      ethereum.Value.fromString(param0)
    ]);

    return new DDaw__phrasesResult(result[0].toAddress(), result[1].toBigInt());
  }

  try_phrases(param0: string): ethereum.CallResult<DDaw__phrasesResult> {
    let result = super.tryCall("phrases", "phrases(string):(address,uint256)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DDaw__phrasesResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  tracks(param0: string): DDaw__tracksResult {
    let result = super.call(
      "tracks",
      "tracks(string):(address,uint256,string,address)",
      [ethereum.Value.fromString(param0)]
    );

    return new DDaw__tracksResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toAddress()
    );
  }

  try_tracks(param0: string): ethereum.CallResult<DDaw__tracksResult> {
    let result = super.tryCall(
      "tracks",
      "tracks(string):(address,uint256,string,address)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DDaw__tracksResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toAddress()
      )
    );
  }
}

export class BuyTrackCall extends ethereum.Call {
  get inputs(): BuyTrackCall__Inputs {
    return new BuyTrackCall__Inputs(this);
  }

  get outputs(): BuyTrackCall__Outputs {
    return new BuyTrackCall__Outputs(this);
  }
}

export class BuyTrackCall__Inputs {
  _call: BuyTrackCall;

  constructor(call: BuyTrackCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class BuyTrackCall__Outputs {
  _call: BuyTrackCall;

  constructor(call: BuyTrackCall) {
    this._call = call;
  }
}

export class NewPhraseCall extends ethereum.Call {
  get inputs(): NewPhraseCall__Inputs {
    return new NewPhraseCall__Inputs(this);
  }

  get outputs(): NewPhraseCall__Outputs {
    return new NewPhraseCall__Outputs(this);
  }
}

export class NewPhraseCall__Inputs {
  _call: NewPhraseCall;

  constructor(call: NewPhraseCall) {
    this._call = call;
  }

  get phrase(): string {
    return this._call.inputValues[0].value.toString();
  }

  get royalty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NewPhraseCall__Outputs {
  _call: NewPhraseCall;

  constructor(call: NewPhraseCall) {
    this._call = call;
  }
}

export class NewTrackCall extends ethereum.Call {
  get inputs(): NewTrackCall__Inputs {
    return new NewTrackCall__Inputs(this);
  }

  get outputs(): NewTrackCall__Outputs {
    return new NewTrackCall__Outputs(this);
  }
}

export class NewTrackCall__Inputs {
  _call: NewTrackCall;

  constructor(call: NewTrackCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _phrases(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _cost(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class NewTrackCall__Outputs {
  _call: NewTrackCall;

  constructor(call: NewTrackCall) {
    this._call = call;
  }
}
